// Code generated by MockGen. DO NOT EDIT.
// Source: ./isession_service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	domain_models "mail/internal/microservice/models/domain_models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionUseCase is a mock of SessionUseCase interface.
type MockSessionUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSessionUseCaseMockRecorder
}

// MockSessionUseCaseMockRecorder is the mock recorder for MockSessionUseCase.
type MockSessionUseCaseMockRecorder struct {
	mock *MockSessionUseCase
}

// NewMockSessionUseCase creates a new mock instance.
func NewMockSessionUseCase(ctrl *gomock.Controller) *MockSessionUseCase {
	mock := &MockSessionUseCase{ctrl: ctrl}
	mock.recorder = &MockSessionUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionUseCase) EXPECT() *MockSessionUseCaseMockRecorder {
	return m.recorder
}

// CleanupExpiredSessions mock base method.
func (m *MockSessionUseCase) CleanupExpiredSessions(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupExpiredSessions", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupExpiredSessions indicates an expected call of CleanupExpiredSessions.
func (mr *MockSessionUseCaseMockRecorder) CleanupExpiredSessions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupExpiredSessions", reflect.TypeOf((*MockSessionUseCase)(nil).CleanupExpiredSessions), ctx)
}

// CreateNewSession mock base method.
func (m *MockSessionUseCase) CreateNewSession(userID uint32, device string, lifeTime int, ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewSession", userID, device, lifeTime, ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewSession indicates an expected call of CreateNewSession.
func (mr *MockSessionUseCaseMockRecorder) CreateNewSession(userID, device, lifeTime, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewSession", reflect.TypeOf((*MockSessionUseCase)(nil).CreateNewSession), userID, device, lifeTime, ctx)
}

// DeleteSession mock base method.
func (m *MockSessionUseCase) DeleteSession(sessionID string, ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", sessionID, ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockSessionUseCaseMockRecorder) DeleteSession(sessionID, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockSessionUseCase)(nil).DeleteSession), sessionID, ctx)
}

// GetLogin mock base method.
func (m *MockSessionUseCase) GetLogin(sessionID string, ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogin", sessionID, ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogin indicates an expected call of GetLogin.
func (mr *MockSessionUseCaseMockRecorder) GetLogin(sessionID, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogin", reflect.TypeOf((*MockSessionUseCase)(nil).GetLogin), sessionID, ctx)
}

// GetProfileID mock base method.
func (m *MockSessionUseCase) GetProfileID(sessionID string, ctx context.Context) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileID", sessionID, ctx)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileID indicates an expected call of GetProfileID.
func (mr *MockSessionUseCaseMockRecorder) GetProfileID(sessionID, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileID", reflect.TypeOf((*MockSessionUseCase)(nil).GetProfileID), sessionID, ctx)
}

// GetSession mock base method.
func (m *MockSessionUseCase) GetSession(sessionID string, ctx context.Context) (*domain_models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", sessionID, ctx)
	ret0, _ := ret[0].(*domain_models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockSessionUseCaseMockRecorder) GetSession(sessionID, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockSessionUseCase)(nil).GetSession), sessionID, ctx)
}
