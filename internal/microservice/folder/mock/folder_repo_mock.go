// Code generated by MockGen. DO NOT EDIT.
// Source: ./ifolder_repo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	domain_models "mail/internal/microservice/models/domain_models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFolderRepository is a mock of FolderRepository interface.
type MockFolderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFolderRepositoryMockRecorder
}

// MockFolderRepositoryMockRecorder is the mock recorder for MockFolderRepository.
type MockFolderRepositoryMockRecorder struct {
	mock *MockFolderRepository
}

// NewMockFolderRepository creates a new mock instance.
func NewMockFolderRepository(ctrl *gomock.Controller) *MockFolderRepository {
	mock := &MockFolderRepository{ctrl: ctrl}
	mock.recorder = &MockFolderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFolderRepository) EXPECT() *MockFolderRepositoryMockRecorder {
	return m.recorder
}

// AddEmailFolder mocks base method.
func (m *MockFolderRepository) AddEmailFolder(folderID, emailID uint32, ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEmailFolder", folderID, emailID, ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEmailFolder indicates an expected call of AddEmailFolder.
func (mr *MockFolderRepositoryMockRecorder) AddEmailFolder(folderID, emailID, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEmailFolder", reflect.TypeOf((*MockFolderRepository)(nil).AddEmailFolder), folderID, emailID, ctx)
}

// CheckEmail mocks base method.
func (m *MockFolderRepository) CheckEmail(emailID, profileID uint32, ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEmail", emailID, profileID, ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckEmail indicates an expected call of CheckEmail.
func (mr *MockFolderRepositoryMockRecorder) CheckEmail(emailID, profileID, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEmail", reflect.TypeOf((*MockFolderRepository)(nil).CheckEmail), emailID, profileID, ctx)
}

// CheckFolder mocks base method.
func (m *MockFolderRepository) CheckFolder(folderID, profileID uint32, ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckFolder", folderID, profileID, ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckFolder indicates an expected call of CheckFolder.
func (mr *MockFolderRepositoryMockRecorder) CheckFolder(folderID, profileID, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFolder", reflect.TypeOf((*MockFolderRepository)(nil).CheckFolder), folderID, profileID, ctx)
}

// Create mocks base method.
func (m *MockFolderRepository) Create(folder *domain_models.Folder, ctx context.Context) (uint32, *domain_models.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", folder, ctx)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(*domain_models.Folder)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockFolderRepositoryMockRecorder) Create(folder, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFolderRepository)(nil).Create), folder, ctx)
}

// Delete mocks base method.
func (m *MockFolderRepository) Delete(folderID, profileID uint32, ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", folderID, profileID, ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockFolderRepositoryMockRecorder) Delete(folderID, profileID, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFolderRepository)(nil).Delete), folderID, profileID, ctx)
}

// DeleteEmailFolder mocks base method.
func (m *MockFolderRepository) DeleteEmailFolder(folderID, emailID uint32, ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmailFolder", folderID, emailID, ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmailFolder indicates an expected call of DeleteEmailFolder.
func (mr *MockFolderRepositoryMockRecorder) DeleteEmailFolder(folderID, emailID, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailFolder", reflect.TypeOf((*MockFolderRepository)(nil).DeleteEmailFolder), folderID, emailID, ctx)
}

// GetAll mocks base method.
func (m *MockFolderRepository) GetAll(profileID uint32, offset, limit int64, ctx context.Context) ([]*domain_models.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", profileID, offset, limit, ctx)
	ret0, _ := ret[0].([]*domain_models.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockFolderRepositoryMockRecorder) GetAll(profileID, offset, limit, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockFolderRepository)(nil).GetAll), profileID, offset, limit, ctx)
}

// GetAllEmails mocks base method.
func (m *MockFolderRepository) GetAllEmails(folderID, profileId, limit, offset uint32, ctx context.Context) ([]*domain_models.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEmails", folderID, profileId, limit, offset, ctx)
	ret0, _ := ret[0].([]*domain_models.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEmails indicates an expected call of GetAllEmails.
func (mr *MockFolderRepositoryMockRecorder) GetAllEmails(folderID, profileId, limit, offset, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEmails", reflect.TypeOf((*MockFolderRepository)(nil).GetAllEmails), folderID, profileId, limit, offset, ctx)
}

// Update mocks base method.
func (m *MockFolderRepository) Update(newUpFolder *domain_models.Folder, ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", newUpFolder, ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFolderRepositoryMockRecorder) Update(newUpFolder, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFolderRepository)(nil).Update), newUpFolder, ctx)
}
