// Code generated by MockGen. DO NOT EDIT.
// Source: ./ifolder_service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	domain_models "mail/internal/microservice/models/domain_models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFolderUseCase is a mock of FolderUseCase interface.
type MockFolderUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockFolderUseCaseMockRecorder
}

// MockFolderUseCaseMockRecorder is the mock recorder for MockFolderUseCase.
type MockFolderUseCaseMockRecorder struct {
	mock *MockFolderUseCase
}

// NewMockFolderUseCase creates a new mock instance.
func NewMockFolderUseCase(ctrl *gomock.Controller) *MockFolderUseCase {
	mock := &MockFolderUseCase{ctrl: ctrl}
	mock.recorder = &MockFolderUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFolderUseCase) EXPECT() *MockFolderUseCaseMockRecorder {
	return m.recorder
}

// AddEmailInFolder mocks base method.
func (m *MockFolderUseCase) AddEmailInFolder(folderID, emailID uint32, ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEmailInFolder", folderID, emailID, ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEmailInFolder indicates an expected call of AddEmailInFolder.
func (mr *MockFolderUseCaseMockRecorder) AddEmailInFolder(folderID, emailID, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEmailInFolder", reflect.TypeOf((*MockFolderUseCase)(nil).AddEmailInFolder), folderID, emailID, ctx)
}

// CheckEmailProfile mocks base method.
func (m *MockFolderUseCase) CheckEmailProfile(emailID, profileID uint32, ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEmailProfile", emailID, profileID, ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckEmailProfile indicates an expected call of CheckEmailProfile.
func (mr *MockFolderUseCaseMockRecorder) CheckEmailProfile(emailID, profileID, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEmailProfile", reflect.TypeOf((*MockFolderUseCase)(nil).CheckEmailProfile), emailID, profileID, ctx)
}

// CheckFolderProfile mocks base method.
func (m *MockFolderUseCase) CheckFolderProfile(folderID, profileID uint32, ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckFolderProfile", folderID, profileID, ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckFolderProfile indicates an expected call of CheckFolderProfile.
func (mr *MockFolderUseCaseMockRecorder) CheckFolderProfile(folderID, profileID, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFolderProfile", reflect.TypeOf((*MockFolderUseCase)(nil).CheckFolderProfile), folderID, profileID, ctx)
}

// CreateFolder mocks base method.
func (m *MockFolderUseCase) CreateFolder(newFolder *domain_models.Folder, ctx context.Context) (uint32, *domain_models.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFolder", newFolder, ctx)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(*domain_models.Folder)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateFolder indicates an expected call of CreateFolder.
func (mr *MockFolderUseCaseMockRecorder) CreateFolder(newFolder, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFolder", reflect.TypeOf((*MockFolderUseCase)(nil).CreateFolder), newFolder, ctx)
}

// DeleteEmailInFolder mocks base method.
func (m *MockFolderUseCase) DeleteEmailInFolder(folderID, emailID uint32, ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmailInFolder", folderID, emailID, ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmailInFolder indicates an expected call of DeleteEmailInFolder.
func (mr *MockFolderUseCaseMockRecorder) DeleteEmailInFolder(folderID, emailID, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailInFolder", reflect.TypeOf((*MockFolderUseCase)(nil).DeleteEmailInFolder), folderID, emailID, ctx)
}

// DeleteFolder mocks base method.
func (m *MockFolderUseCase) DeleteFolder(folderID, profileID uint32, ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFolder", folderID, profileID, ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFolder indicates an expected call of DeleteFolder.
func (mr *MockFolderUseCaseMockRecorder) DeleteFolder(folderID, profileID, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFolder", reflect.TypeOf((*MockFolderUseCase)(nil).DeleteFolder), folderID, profileID, ctx)
}

// GetAllEmailsInFolder mocks base method.
func (m *MockFolderUseCase) GetAllEmailsInFolder(folderID, profileID, limit, offset uint32, login string, ctx context.Context) ([]*domain_models.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEmailsInFolder", folderID, profileID, limit, offset, login, ctx)
	ret0, _ := ret[0].([]*domain_models.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEmailsInFolder indicates an expected call of GetAllEmailsInFolder.
func (mr *MockFolderUseCaseMockRecorder) GetAllEmailsInFolder(folderID, profileID, limit, offset, login, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEmailsInFolder", reflect.TypeOf((*MockFolderUseCase)(nil).GetAllEmailsInFolder), folderID, profileID, limit, offset, login, ctx)
}

// GetAllFolderName mocks base method.
func (m *MockFolderUseCase) GetAllFolderName(emailID uint32, ctx context.Context) ([]*domain_models.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFolderName", emailID, ctx)
	ret0, _ := ret[0].([]*domain_models.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFolderName indicates an expected call of GetAllFolderName.
func (mr *MockFolderUseCaseMockRecorder) GetAllFolderName(emailID, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFolderName", reflect.TypeOf((*MockFolderUseCase)(nil).GetAllFolderName), emailID, ctx)
}

// GetAllFolders mocks base method.
func (m *MockFolderUseCase) GetAllFolders(profileID uint32, offset, limit int64, ctx context.Context) ([]*domain_models.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFolders", profileID, offset, limit, ctx)
	ret0, _ := ret[0].([]*domain_models.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFolders indicates an expected call of GetAllFolders.
func (mr *MockFolderUseCaseMockRecorder) GetAllFolders(profileID, offset, limit, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFolders", reflect.TypeOf((*MockFolderUseCase)(nil).GetAllFolders), profileID, offset, limit, ctx)
}

// UpdateFolder mocks base method.
func (m *MockFolderUseCase) UpdateFolder(newUpFolder *domain_models.Folder, ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFolder", newUpFolder, ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFolder indicates an expected call of UpdateFolder.
func (mr *MockFolderUseCaseMockRecorder) UpdateFolder(newUpFolder, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFolder", reflect.TypeOf((*MockFolderUseCase)(nil).UpdateFolder), newUpFolder, ctx)
}
