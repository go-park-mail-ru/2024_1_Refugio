// Code generated by MockGen. DO NOT EDIT.
// Source: ./iquestion_repo.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	domain_models "mail/internal/microservice/models/domain_models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQuestionAnswerRepository is a mock of QuestionAnswerRepository interface.
type MockQuestionAnswerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionAnswerRepositoryMockRecorder
}

// MockQuestionAnswerRepositoryMockRecorder is the mock recorder for MockQuestionAnswerRepository.
type MockQuestionAnswerRepositoryMockRecorder struct {
	mock *MockQuestionAnswerRepository
}

// NewMockQuestionAnswerRepository creates a new mock instance.
func NewMockQuestionAnswerRepository(ctrl *gomock.Controller) *MockQuestionAnswerRepository {
	mock := &MockQuestionAnswerRepository{ctrl: ctrl}
	mock.recorder = &MockQuestionAnswerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionAnswerRepository) EXPECT() *MockQuestionAnswerRepositoryMockRecorder {
	return m.recorder
}

// AddAnswer mock base method.
func (m *MockQuestionAnswerRepository) AddAnswer(newAnswer *domain_models.Answer, ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAnswer", newAnswer, ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAnswer indicates an expected call of AddAnswer.
func (mr *MockQuestionAnswerRepositoryMockRecorder) AddAnswer(newAnswer, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAnswer", reflect.TypeOf((*MockQuestionAnswerRepository)(nil).AddAnswer), newAnswer, ctx)
}

// AddQuestion mock base method.
func (m *MockQuestionAnswerRepository) AddQuestion(newQuestion *domain_models.Question, ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddQuestion", newQuestion, ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddQuestion indicates an expected call of AddQuestion.
func (mr *MockQuestionAnswerRepositoryMockRecorder) AddQuestion(newQuestion, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuestion", reflect.TypeOf((*MockQuestionAnswerRepository)(nil).AddQuestion), newQuestion, ctx)
}

// GetAllAnswers mock base method.
func (m *MockQuestionAnswerRepository) GetAllAnswers(ctx context.Context) ([]*domain_models.Answer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAnswers", ctx)
	ret0, _ := ret[0].([]*domain_models.Answer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAnswers indicates an expected call of GetAllAnswers.
func (mr *MockQuestionAnswerRepositoryMockRecorder) GetAllAnswers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAnswers", reflect.TypeOf((*MockQuestionAnswerRepository)(nil).GetAllAnswers), ctx)
}

// GetAllQuestions mock base method.
func (m *MockQuestionAnswerRepository) GetAllQuestions(ctx context.Context) ([]*domain_models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllQuestions", ctx)
	ret0, _ := ret[0].([]*domain_models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllQuestions indicates an expected call of GetAllQuestions.
func (mr *MockQuestionAnswerRepositoryMockRecorder) GetAllQuestions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllQuestions", reflect.TypeOf((*MockQuestionAnswerRepository)(nil).GetAllQuestions), ctx)
}
