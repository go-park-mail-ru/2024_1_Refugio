// Code generated by MockGen. DO NOT EDIT.
// Source: ./iquestion_service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	domain_models "mail/internal/microservice/models/domain_models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQuestionAnswerUseCase is a mock of QuestionAnswerUseCase interface.
type MockQuestionAnswerUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionAnswerUseCaseMockRecorder
}

// MockQuestionAnswerUseCaseMockRecorder is the mock recorder for MockQuestionAnswerUseCase.
type MockQuestionAnswerUseCaseMockRecorder struct {
	mock *MockQuestionAnswerUseCase
}

// NewMockQuestionAnswerUseCase creates a new mock instance.
func NewMockQuestionAnswerUseCase(ctrl *gomock.Controller) *MockQuestionAnswerUseCase {
	mock := &MockQuestionAnswerUseCase{ctrl: ctrl}
	mock.recorder = &MockQuestionAnswerUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionAnswerUseCase) EXPECT() *MockQuestionAnswerUseCaseMockRecorder {
	return m.recorder
}

// AddAnswer mock base method.
func (m *MockQuestionAnswerUseCase) AddAnswer(newAnswer *domain_models.Answer, ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAnswer", newAnswer, ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAnswer indicates an expected call of AddAnswer.
func (mr *MockQuestionAnswerUseCaseMockRecorder) AddAnswer(newAnswer, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAnswer", reflect.TypeOf((*MockQuestionAnswerUseCase)(nil).AddAnswer), newAnswer, ctx)
}

// AddQuestion mock base method.
func (m *MockQuestionAnswerUseCase) AddQuestion(newQuestion *domain_models.Question, ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddQuestion", newQuestion, ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddQuestion indicates an expected call of AddQuestion.
func (mr *MockQuestionAnswerUseCaseMockRecorder) AddQuestion(newQuestion, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuestion", reflect.TypeOf((*MockQuestionAnswerUseCase)(nil).AddQuestion), newQuestion, ctx)
}

// GetQuestions mock base method.
func (m *MockQuestionAnswerUseCase) GetQuestions(ctx context.Context) ([]*domain_models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestions", ctx)
	ret0, _ := ret[0].([]*domain_models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestions indicates an expected call of GetQuestions.
func (mr *MockQuestionAnswerUseCaseMockRecorder) GetQuestions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestions", reflect.TypeOf((*MockQuestionAnswerUseCase)(nil).GetQuestions), ctx)
}

// GetStatistics mock base method.
func (m *MockQuestionAnswerUseCase) GetStatistics(ctx context.Context) ([]*domain_models.Statistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatistics", ctx)
	ret0, _ := ret[0].([]*domain_models.Statistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatistics indicates an expected call of GetStatistics.
func (mr *MockQuestionAnswerUseCaseMockRecorder) GetStatistics(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatistics", reflect.TypeOf((*MockQuestionAnswerUseCase)(nil).GetStatistics), ctx)
}
