// Code generated by MockGen. DO NOT EDIT.
// Source: ./question-answer_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	proto "mail/internal/microservice/questionnaire/proto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockQuestionServiceClient is a mock of QuestionServiceClient interface.
type MockQuestionServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionServiceClientMockRecorder
}

// MockQuestionServiceClientMockRecorder is the mock recorder for MockQuestionServiceClient.
type MockQuestionServiceClientMockRecorder struct {
	mock *MockQuestionServiceClient
}

// NewMockQuestionServiceClient creates a new mock instance.
func NewMockQuestionServiceClient(ctrl *gomock.Controller) *MockQuestionServiceClient {
	mock := &MockQuestionServiceClient{ctrl: ctrl}
	mock.recorder = &MockQuestionServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionServiceClient) EXPECT() *MockQuestionServiceClientMockRecorder {
	return m.recorder
}

// AddAnswer mock base method.
func (m *MockQuestionServiceClient) AddAnswer(ctx context.Context, in *proto.AddAnswerRequest, opts ...grpc.CallOption) (*proto.AddAnswerReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddAnswer", varargs...)
	ret0, _ := ret[0].(*proto.AddAnswerReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAnswer indicates an expected call of AddAnswer.
func (mr *MockQuestionServiceClientMockRecorder) AddAnswer(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAnswer", reflect.TypeOf((*MockQuestionServiceClient)(nil).AddAnswer), varargs...)
}

// AddQuestion mock base method.
func (m *MockQuestionServiceClient) AddQuestion(ctx context.Context, in *proto.AddQuestionRequest, opts ...grpc.CallOption) (*proto.AddQuestionReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddQuestion", varargs...)
	ret0, _ := ret[0].(*proto.AddQuestionReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddQuestion indicates an expected call of AddQuestion.
func (mr *MockQuestionServiceClientMockRecorder) AddQuestion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuestion", reflect.TypeOf((*MockQuestionServiceClient)(nil).AddQuestion), varargs...)
}

// GetQuestions mock base method.
func (m *MockQuestionServiceClient) GetQuestions(ctx context.Context, in *proto.GetQuestionsRequest, opts ...grpc.CallOption) (*proto.GetQuestionsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQuestions", varargs...)
	ret0, _ := ret[0].(*proto.GetQuestionsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestions indicates an expected call of GetQuestions.
func (mr *MockQuestionServiceClientMockRecorder) GetQuestions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestions", reflect.TypeOf((*MockQuestionServiceClient)(nil).GetQuestions), varargs...)
}

// GetStatistic mock base method.
func (m *MockQuestionServiceClient) GetStatistic(ctx context.Context, in *proto.GetStatisticRequest, opts ...grpc.CallOption) (*proto.GetStatisticReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStatistic", varargs...)
	ret0, _ := ret[0].(*proto.GetStatisticReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatistic indicates an expected call of GetStatistic.
func (mr *MockQuestionServiceClientMockRecorder) GetStatistic(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatistic", reflect.TypeOf((*MockQuestionServiceClient)(nil).GetStatistic), varargs...)
}

// MockQuestionServiceServer is a mock of QuestionServiceServer interface.
type MockQuestionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionServiceServerMockRecorder
}

// MockQuestionServiceServerMockRecorder is the mock recorder for MockQuestionServiceServer.
type MockQuestionServiceServerMockRecorder struct {
	mock *MockQuestionServiceServer
}

// NewMockQuestionServiceServer creates a new mock instance.
func NewMockQuestionServiceServer(ctrl *gomock.Controller) *MockQuestionServiceServer {
	mock := &MockQuestionServiceServer{ctrl: ctrl}
	mock.recorder = &MockQuestionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionServiceServer) EXPECT() *MockQuestionServiceServerMockRecorder {
	return m.recorder
}

// AddAnswer mock base method.
func (m *MockQuestionServiceServer) AddAnswer(arg0 context.Context, arg1 *proto.AddAnswerRequest) (*proto.AddAnswerReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAnswer", arg0, arg1)
	ret0, _ := ret[0].(*proto.AddAnswerReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAnswer indicates an expected call of AddAnswer.
func (mr *MockQuestionServiceServerMockRecorder) AddAnswer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAnswer", reflect.TypeOf((*MockQuestionServiceServer)(nil).AddAnswer), arg0, arg1)
}

// AddQuestion mock base method.
func (m *MockQuestionServiceServer) AddQuestion(arg0 context.Context, arg1 *proto.AddQuestionRequest) (*proto.AddQuestionReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddQuestion", arg0, arg1)
	ret0, _ := ret[0].(*proto.AddQuestionReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddQuestion indicates an expected call of AddQuestion.
func (mr *MockQuestionServiceServerMockRecorder) AddQuestion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuestion", reflect.TypeOf((*MockQuestionServiceServer)(nil).AddQuestion), arg0, arg1)
}

// GetQuestions mock base method.
func (m *MockQuestionServiceServer) GetQuestions(arg0 context.Context, arg1 *proto.GetQuestionsRequest) (*proto.GetQuestionsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestions", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetQuestionsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestions indicates an expected call of GetQuestions.
func (mr *MockQuestionServiceServerMockRecorder) GetQuestions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestions", reflect.TypeOf((*MockQuestionServiceServer)(nil).GetQuestions), arg0, arg1)
}

// GetStatistic mock base method.
func (m *MockQuestionServiceServer) GetStatistic(arg0 context.Context, arg1 *proto.GetStatisticRequest) (*proto.GetStatisticReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatistic", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetStatisticReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatistic indicates an expected call of GetStatistic.
func (mr *MockQuestionServiceServerMockRecorder) GetStatistic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatistic", reflect.TypeOf((*MockQuestionServiceServer)(nil).GetStatistic), arg0, arg1)
}

// mustEmbedUnimplementedQuestionServiceServer mock base method.
func (m *MockQuestionServiceServer) mustEmbedUnimplementedQuestionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedQuestionServiceServer")
}

// mustEmbedUnimplementedQuestionServiceServer indicates an expected call of mustEmbedUnimplementedQuestionServiceServer.
func (mr *MockQuestionServiceServerMockRecorder) mustEmbedUnimplementedQuestionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedQuestionServiceServer", reflect.TypeOf((*MockQuestionServiceServer)(nil).mustEmbedUnimplementedQuestionServiceServer))
}

// MockUnsafeQuestionServiceServer is a mock of UnsafeQuestionServiceServer interface.
type MockUnsafeQuestionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeQuestionServiceServerMockRecorder
}

// MockUnsafeQuestionServiceServerMockRecorder is the mock recorder for MockUnsafeQuestionServiceServer.
type MockUnsafeQuestionServiceServerMockRecorder struct {
	mock *MockUnsafeQuestionServiceServer
}

// NewMockUnsafeQuestionServiceServer creates a new mock instance.
func NewMockUnsafeQuestionServiceServer(ctrl *gomock.Controller) *MockUnsafeQuestionServiceServer {
	mock := &MockUnsafeQuestionServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeQuestionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeQuestionServiceServer) EXPECT() *MockUnsafeQuestionServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedQuestionServiceServer mock base method.
func (m *MockUnsafeQuestionServiceServer) mustEmbedUnimplementedQuestionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedQuestionServiceServer")
}

// mustEmbedUnimplementedQuestionServiceServer indicates an expected call of mustEmbedUnimplementedQuestionServiceServer.
func (mr *MockUnsafeQuestionServiceServerMockRecorder) mustEmbedUnimplementedQuestionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedQuestionServiceServer", reflect.TypeOf((*MockUnsafeQuestionServiceServer)(nil).mustEmbedUnimplementedQuestionServiceServer))
}
