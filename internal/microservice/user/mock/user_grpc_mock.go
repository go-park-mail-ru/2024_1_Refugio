// Code generated by MockGen. DO NOT EDIT.
// Source: ./user_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	proto "mail/internal/microservice/user/proto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockUserServiceClient is a mock of UserServiceClient interface.
type MockUserServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceClientMockRecorder
}

// MockUserServiceClientMockRecorder is the mock recorder for MockUserServiceClient.
type MockUserServiceClientMockRecorder struct {
	mock *MockUserServiceClient
}

// NewMockUserServiceClient creates a new mock instance.
func NewMockUserServiceClient(ctrl *gomock.Controller) *MockUserServiceClient {
	mock := &MockUserServiceClient{ctrl: ctrl}
	mock.recorder = &MockUserServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceClient) EXPECT() *MockUserServiceClientMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserServiceClient) CreateUser(ctx context.Context, in *proto.CreateUserRequest, opts ...grpc.CallOption) (*proto.CreateUserReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUser", varargs...)
	ret0, _ := ret[0].(*proto.CreateUserReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceClientMockRecorder) CreateUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserServiceClient)(nil).CreateUser), varargs...)
}

// CreateUserOtherMail mocks base method.
func (m *MockUserServiceClient) CreateUserOtherMail(ctx context.Context, in *proto.CreateUserRequest, opts ...grpc.CallOption) (*proto.CreateUserReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUserOtherMail", varargs...)
	ret0, _ := ret[0].(*proto.CreateUserReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserOtherMail indicates an expected call of CreateUserOtherMail.
func (mr *MockUserServiceClientMockRecorder) CreateUserOtherMail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserOtherMail", reflect.TypeOf((*MockUserServiceClient)(nil).CreateUserOtherMail), varargs...)
}

// DeleteUserAvatar mocks base method.
func (m *MockUserServiceClient) DeleteUserAvatar(ctx context.Context, in *proto.DeleteUserAvatarRequest, opts ...grpc.CallOption) (*proto.DeleteUserAvatarReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserAvatar", varargs...)
	ret0, _ := ret[0].(*proto.DeleteUserAvatarReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserAvatar indicates an expected call of DeleteUserAvatar.
func (mr *MockUserServiceClientMockRecorder) DeleteUserAvatar(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserAvatar", reflect.TypeOf((*MockUserServiceClient)(nil).DeleteUserAvatar), varargs...)
}

// DeleteUserById mocks base method.
func (m *MockUserServiceClient) DeleteUserById(ctx context.Context, in *proto.DeleteUserByIdRequest, opts ...grpc.CallOption) (*proto.DeleteUserByIdReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUserById", varargs...)
	ret0, _ := ret[0].(*proto.DeleteUserByIdReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserById indicates an expected call of DeleteUserById.
func (mr *MockUserServiceClientMockRecorder) DeleteUserById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserById", reflect.TypeOf((*MockUserServiceClient)(nil).DeleteUserById), varargs...)
}

// GetUser mocks base method.
func (m *MockUserServiceClient) GetUser(ctx context.Context, in *proto.GetUserRequest, opts ...grpc.CallOption) (*proto.GetUserReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUser", varargs...)
	ret0, _ := ret[0].(*proto.GetUserReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServiceClientMockRecorder) GetUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserServiceClient)(nil).GetUser), varargs...)
}

// GetUserByLogin mocks base method.
func (m *MockUserServiceClient) GetUserByLogin(ctx context.Context, in *proto.GetUserByLoginRequest, opts ...grpc.CallOption) (*proto.GetUserByLoginReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserByLogin", varargs...)
	ret0, _ := ret[0].(*proto.GetUserByLoginReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockUserServiceClientMockRecorder) GetUserByLogin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockUserServiceClient)(nil).GetUserByLogin), varargs...)
}

// GetUserByOnlyLogin mocks base method.
func (m *MockUserServiceClient) GetUserByOnlyLogin(ctx context.Context, in *proto.GetUserByOnlyLoginRequest, opts ...grpc.CallOption) (*proto.GetUserByOnlyLoginReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserByOnlyLogin", varargs...)
	ret0, _ := ret[0].(*proto.GetUserByOnlyLoginReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByOnlyLogin indicates an expected call of GetUserByOnlyLogin.
func (mr *MockUserServiceClientMockRecorder) GetUserByOnlyLogin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByOnlyLogin", reflect.TypeOf((*MockUserServiceClient)(nil).GetUserByOnlyLogin), varargs...)
}

// GetUserByVKId mocks base method.
func (m *MockUserServiceClient) GetUserByVKId(ctx context.Context, in *proto.GetUserVKIdRequest, opts ...grpc.CallOption) (*proto.GetUserReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserByVKId", varargs...)
	ret0, _ := ret[0].(*proto.GetUserReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByVKId indicates an expected call of GetUserByVKId.
func (mr *MockUserServiceClientMockRecorder) GetUserByVKId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByVKId", reflect.TypeOf((*MockUserServiceClient)(nil).GetUserByVKId), varargs...)
}

// GetUsers mocks base method.
func (m *MockUserServiceClient) GetUsers(ctx context.Context, in *proto.GetUsersRequest, opts ...grpc.CallOption) (*proto.GetUsersReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsers", varargs...)
	ret0, _ := ret[0].(*proto.GetUsersReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserServiceClientMockRecorder) GetUsers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserServiceClient)(nil).GetUsers), varargs...)
}

// IsLoginUnique mocks base method.
func (m *MockUserServiceClient) IsLoginUnique(ctx context.Context, in *proto.IsLoginUniqueRequest, opts ...grpc.CallOption) (*proto.IsLoginUniqueReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsLoginUnique", varargs...)
	ret0, _ := ret[0].(*proto.IsLoginUniqueReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLoginUnique indicates an expected call of IsLoginUnique.
func (mr *MockUserServiceClientMockRecorder) IsLoginUnique(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLoginUnique", reflect.TypeOf((*MockUserServiceClient)(nil).IsLoginUnique), varargs...)
}

// UpdateUser mocks base method.
func (m *MockUserServiceClient) UpdateUser(ctx context.Context, in *proto.UpdateUserRequest, opts ...grpc.CallOption) (*proto.UpdateUserReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUser", varargs...)
	ret0, _ := ret[0].(*proto.UpdateUserReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServiceClientMockRecorder) UpdateUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserServiceClient)(nil).UpdateUser), varargs...)
}

// UploadUserAvatar mocks base method.
func (m *MockUserServiceClient) UploadUserAvatar(ctx context.Context, in *proto.UploadUserAvatarRequest, opts ...grpc.CallOption) (*proto.UploadUserAvatarReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadUserAvatar", varargs...)
	ret0, _ := ret[0].(*proto.UploadUserAvatarReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadUserAvatar indicates an expected call of UploadUserAvatar.
func (mr *MockUserServiceClientMockRecorder) UploadUserAvatar(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadUserAvatar", reflect.TypeOf((*MockUserServiceClient)(nil).UploadUserAvatar), varargs...)
}

// MockUserServiceServer is a mock of UserServiceServer interface.
type MockUserServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceServerMockRecorder
}

// MockUserServiceServerMockRecorder is the mock recorder for MockUserServiceServer.
type MockUserServiceServerMockRecorder struct {
	mock *MockUserServiceServer
}

// NewMockUserServiceServer creates a new mock instance.
func NewMockUserServiceServer(ctrl *gomock.Controller) *MockUserServiceServer {
	mock := &MockUserServiceServer{ctrl: ctrl}
	mock.recorder = &MockUserServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServiceServer) EXPECT() *MockUserServiceServerMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserServiceServer) CreateUser(arg0 context.Context, arg1 *proto.CreateUserRequest) (*proto.CreateUserReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*proto.CreateUserReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceServerMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserServiceServer)(nil).CreateUser), arg0, arg1)
}

// CreateUserOtherMail mocks base method.
func (m *MockUserServiceServer) CreateUserOtherMail(arg0 context.Context, arg1 *proto.CreateUserRequest) (*proto.CreateUserReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserOtherMail", arg0, arg1)
	ret0, _ := ret[0].(*proto.CreateUserReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserOtherMail indicates an expected call of CreateUserOtherMail.
func (mr *MockUserServiceServerMockRecorder) CreateUserOtherMail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserOtherMail", reflect.TypeOf((*MockUserServiceServer)(nil).CreateUserOtherMail), arg0, arg1)
}

// DeleteUserAvatar mocks base method.
func (m *MockUserServiceServer) DeleteUserAvatar(arg0 context.Context, arg1 *proto.DeleteUserAvatarRequest) (*proto.DeleteUserAvatarReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserAvatar", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeleteUserAvatarReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserAvatar indicates an expected call of DeleteUserAvatar.
func (mr *MockUserServiceServerMockRecorder) DeleteUserAvatar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserAvatar", reflect.TypeOf((*MockUserServiceServer)(nil).DeleteUserAvatar), arg0, arg1)
}

// DeleteUserById mocks base method.
func (m *MockUserServiceServer) DeleteUserById(arg0 context.Context, arg1 *proto.DeleteUserByIdRequest) (*proto.DeleteUserByIdReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserById", arg0, arg1)
	ret0, _ := ret[0].(*proto.DeleteUserByIdReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserById indicates an expected call of DeleteUserById.
func (mr *MockUserServiceServerMockRecorder) DeleteUserById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserById", reflect.TypeOf((*MockUserServiceServer)(nil).DeleteUserById), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockUserServiceServer) GetUser(arg0 context.Context, arg1 *proto.GetUserRequest) (*proto.GetUserReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetUserReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServiceServerMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserServiceServer)(nil).GetUser), arg0, arg1)
}

// GetUserByLogin mocks base method.
func (m *MockUserServiceServer) GetUserByLogin(arg0 context.Context, arg1 *proto.GetUserByLoginRequest) (*proto.GetUserByLoginReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetUserByLoginReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockUserServiceServerMockRecorder) GetUserByLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockUserServiceServer)(nil).GetUserByLogin), arg0, arg1)
}

// GetUserByOnlyLogin mocks base method.
func (m *MockUserServiceServer) GetUserByOnlyLogin(arg0 context.Context, arg1 *proto.GetUserByOnlyLoginRequest) (*proto.GetUserByOnlyLoginReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByOnlyLogin", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetUserByOnlyLoginReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByOnlyLogin indicates an expected call of GetUserByOnlyLogin.
func (mr *MockUserServiceServerMockRecorder) GetUserByOnlyLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByOnlyLogin", reflect.TypeOf((*MockUserServiceServer)(nil).GetUserByOnlyLogin), arg0, arg1)
}

// GetUserByVKId mocks base method.
func (m *MockUserServiceServer) GetUserByVKId(arg0 context.Context, arg1 *proto.GetUserVKIdRequest) (*proto.GetUserReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByVKId", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetUserReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByVKId indicates an expected call of GetUserByVKId.
func (mr *MockUserServiceServerMockRecorder) GetUserByVKId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByVKId", reflect.TypeOf((*MockUserServiceServer)(nil).GetUserByVKId), arg0, arg1)
}

// GetUsers mocks base method.
func (m *MockUserServiceServer) GetUsers(arg0 context.Context, arg1 *proto.GetUsersRequest) (*proto.GetUsersReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1)
	ret0, _ := ret[0].(*proto.GetUsersReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserServiceServerMockRecorder) GetUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserServiceServer)(nil).GetUsers), arg0, arg1)
}

// IsLoginUnique mocks base method.
func (m *MockUserServiceServer) IsLoginUnique(arg0 context.Context, arg1 *proto.IsLoginUniqueRequest) (*proto.IsLoginUniqueReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLoginUnique", arg0, arg1)
	ret0, _ := ret[0].(*proto.IsLoginUniqueReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLoginUnique indicates an expected call of IsLoginUnique.
func (mr *MockUserServiceServerMockRecorder) IsLoginUnique(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLoginUnique", reflect.TypeOf((*MockUserServiceServer)(nil).IsLoginUnique), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockUserServiceServer) UpdateUser(arg0 context.Context, arg1 *proto.UpdateUserRequest) (*proto.UpdateUserReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(*proto.UpdateUserReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserServiceServerMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserServiceServer)(nil).UpdateUser), arg0, arg1)
}

// UploadUserAvatar mocks base method.
func (m *MockUserServiceServer) UploadUserAvatar(arg0 context.Context, arg1 *proto.UploadUserAvatarRequest) (*proto.UploadUserAvatarReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadUserAvatar", arg0, arg1)
	ret0, _ := ret[0].(*proto.UploadUserAvatarReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadUserAvatar indicates an expected call of UploadUserAvatar.
func (mr *MockUserServiceServerMockRecorder) UploadUserAvatar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadUserAvatar", reflect.TypeOf((*MockUserServiceServer)(nil).UploadUserAvatar), arg0, arg1)
}

// mustEmbedUnimplementedUserServiceServer mocks base method.
func (m *MockUserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserServiceServer")
}

// mustEmbedUnimplementedUserServiceServer indicates an expected call of mustEmbedUnimplementedUserServiceServer.
func (mr *MockUserServiceServerMockRecorder) mustEmbedUnimplementedUserServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserServiceServer", reflect.TypeOf((*MockUserServiceServer)(nil).mustEmbedUnimplementedUserServiceServer))
}

// MockUnsafeUserServiceServer is a mock of UnsafeUserServiceServer interface.
type MockUnsafeUserServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeUserServiceServerMockRecorder
}

// MockUnsafeUserServiceServerMockRecorder is the mock recorder for MockUnsafeUserServiceServer.
type MockUnsafeUserServiceServerMockRecorder struct {
	mock *MockUnsafeUserServiceServer
}

// NewMockUnsafeUserServiceServer creates a new mock instance.
func NewMockUnsafeUserServiceServer(ctrl *gomock.Controller) *MockUnsafeUserServiceServer {
	mock := &MockUnsafeUserServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeUserServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeUserServiceServer) EXPECT() *MockUnsafeUserServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedUserServiceServer mocks base method.
func (m *MockUnsafeUserServiceServer) mustEmbedUnimplementedUserServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserServiceServer")
}

// mustEmbedUnimplementedUserServiceServer indicates an expected call of mustEmbedUnimplementedUserServiceServer.
func (mr *MockUnsafeUserServiceServerMockRecorder) mustEmbedUnimplementedUserServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserServiceServer", reflect.TypeOf((*MockUnsafeUserServiceServer)(nil).mustEmbedUnimplementedUserServiceServer))
}
