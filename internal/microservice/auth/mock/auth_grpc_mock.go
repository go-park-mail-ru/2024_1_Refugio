// Code generated by MockGen. DO NOT EDIT.
// Source: ./auth_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	proto "mail/internal/microservice/auth/proto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockAuthServiceClient is a mock of AuthServiceClient interface.
type MockAuthServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceClientMockRecorder
}

// MockAuthServiceClientMockRecorder is the mock recorder for MockAuthServiceClient.
type MockAuthServiceClientMockRecorder struct {
	mock *MockAuthServiceClient
}

// NewMockAuthServiceClient creates a new mock instance.
func NewMockAuthServiceClient(ctrl *gomock.Controller) *MockAuthServiceClient {
	mock := &MockAuthServiceClient{ctrl: ctrl}
	mock.recorder = &MockAuthServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceClient) EXPECT() *MockAuthServiceClientMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthServiceClient) Login(ctx context.Context, in *proto.LoginRequest, opts ...grpc.CallOption) (*proto.LoginReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*proto.LoginReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceClientMockRecorder) Login(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthServiceClient)(nil).Login), varargs...)
}

// LoginOtherMail mocks base method.
func (m *MockAuthServiceClient) LoginOtherMail(ctx context.Context, in *proto.LoginOtherMailRequest, opts ...grpc.CallOption) (*proto.LoginReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginOtherMail", varargs...)
	ret0, _ := ret[0].(*proto.LoginReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginOtherMail indicates an expected call of LoginOtherMail.
func (mr *MockAuthServiceClientMockRecorder) LoginOtherMail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginOtherMail", reflect.TypeOf((*MockAuthServiceClient)(nil).LoginOtherMail), varargs...)
}

// LoginVK mocks base method.
func (m *MockAuthServiceClient) LoginVK(ctx context.Context, in *proto.LoginVKRequest, opts ...grpc.CallOption) (*proto.LoginReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginVK", varargs...)
	ret0, _ := ret[0].(*proto.LoginReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginVK indicates an expected call of LoginVK.
func (mr *MockAuthServiceClientMockRecorder) LoginVK(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginVK", reflect.TypeOf((*MockAuthServiceClient)(nil).LoginVK), varargs...)
}

// Logout mocks base method.
func (m *MockAuthServiceClient) Logout(ctx context.Context, in *proto.LogoutRequest, opts ...grpc.CallOption) (*proto.LogoutReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Logout", varargs...)
	ret0, _ := ret[0].(*proto.LogoutReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthServiceClientMockRecorder) Logout(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthServiceClient)(nil).Logout), varargs...)
}

// Signup mocks base method.
func (m *MockAuthServiceClient) Signup(ctx context.Context, in *proto.SignupRequest, opts ...grpc.CallOption) (*proto.SignupReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Signup", varargs...)
	ret0, _ := ret[0].(*proto.SignupReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Signup indicates an expected call of Signup.
func (mr *MockAuthServiceClientMockRecorder) Signup(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockAuthServiceClient)(nil).Signup), varargs...)
}

// SignupOtherMail mocks base method.
func (m *MockAuthServiceClient) SignupOtherMail(ctx context.Context, in *proto.SignupOtherMailRequest, opts ...grpc.CallOption) (*proto.SignupReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignupOtherMail", varargs...)
	ret0, _ := ret[0].(*proto.SignupReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignupOtherMail indicates an expected call of SignupOtherMail.
func (mr *MockAuthServiceClientMockRecorder) SignupOtherMail(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignupOtherMail", reflect.TypeOf((*MockAuthServiceClient)(nil).SignupOtherMail), varargs...)
}

// SignupVK mocks base method.
func (m *MockAuthServiceClient) SignupVK(ctx context.Context, in *proto.SignupVKRequest, opts ...grpc.CallOption) (*proto.SignupReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignupVK", varargs...)
	ret0, _ := ret[0].(*proto.SignupReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignupVK indicates an expected call of SignupVK.
func (mr *MockAuthServiceClientMockRecorder) SignupVK(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignupVK", reflect.TypeOf((*MockAuthServiceClient)(nil).SignupVK), varargs...)
}

// MockAuthServiceServer is a mock of AuthServiceServer interface.
type MockAuthServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceServerMockRecorder
}

// MockAuthServiceServerMockRecorder is the mock recorder for MockAuthServiceServer.
type MockAuthServiceServerMockRecorder struct {
	mock *MockAuthServiceServer
}

// NewMockAuthServiceServer creates a new mock instance.
func NewMockAuthServiceServer(ctrl *gomock.Controller) *MockAuthServiceServer {
	mock := &MockAuthServiceServer{ctrl: ctrl}
	mock.recorder = &MockAuthServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceServer) EXPECT() *MockAuthServiceServerMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthServiceServer) Login(arg0 context.Context, arg1 *proto.LoginRequest) (*proto.LoginReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*proto.LoginReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceServerMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthServiceServer)(nil).Login), arg0, arg1)
}

// LoginOtherMail mocks base method.
func (m *MockAuthServiceServer) LoginOtherMail(arg0 context.Context, arg1 *proto.LoginOtherMailRequest) (*proto.LoginReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginOtherMail", arg0, arg1)
	ret0, _ := ret[0].(*proto.LoginReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginOtherMail indicates an expected call of LoginOtherMail.
func (mr *MockAuthServiceServerMockRecorder) LoginOtherMail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginOtherMail", reflect.TypeOf((*MockAuthServiceServer)(nil).LoginOtherMail), arg0, arg1)
}

// LoginVK mocks base method.
func (m *MockAuthServiceServer) LoginVK(arg0 context.Context, arg1 *proto.LoginVKRequest) (*proto.LoginReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginVK", arg0, arg1)
	ret0, _ := ret[0].(*proto.LoginReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginVK indicates an expected call of LoginVK.
func (mr *MockAuthServiceServerMockRecorder) LoginVK(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginVK", reflect.TypeOf((*MockAuthServiceServer)(nil).LoginVK), arg0, arg1)
}

// Logout mocks base method.
func (m *MockAuthServiceServer) Logout(arg0 context.Context, arg1 *proto.LogoutRequest) (*proto.LogoutReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0, arg1)
	ret0, _ := ret[0].(*proto.LogoutReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthServiceServerMockRecorder) Logout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthServiceServer)(nil).Logout), arg0, arg1)
}

// Signup mocks base method.
func (m *MockAuthServiceServer) Signup(arg0 context.Context, arg1 *proto.SignupRequest) (*proto.SignupReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", arg0, arg1)
	ret0, _ := ret[0].(*proto.SignupReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Signup indicates an expected call of Signup.
func (mr *MockAuthServiceServerMockRecorder) Signup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockAuthServiceServer)(nil).Signup), arg0, arg1)
}

// SignupOtherMail mocks base method.
func (m *MockAuthServiceServer) SignupOtherMail(arg0 context.Context, arg1 *proto.SignupOtherMailRequest) (*proto.SignupReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignupOtherMail", arg0, arg1)
	ret0, _ := ret[0].(*proto.SignupReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignupOtherMail indicates an expected call of SignupOtherMail.
func (mr *MockAuthServiceServerMockRecorder) SignupOtherMail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignupOtherMail", reflect.TypeOf((*MockAuthServiceServer)(nil).SignupOtherMail), arg0, arg1)
}

// SignupVK mocks base method.
func (m *MockAuthServiceServer) SignupVK(arg0 context.Context, arg1 *proto.SignupVKRequest) (*proto.SignupReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignupVK", arg0, arg1)
	ret0, _ := ret[0].(*proto.SignupReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignupVK indicates an expected call of SignupVK.
func (mr *MockAuthServiceServerMockRecorder) SignupVK(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignupVK", reflect.TypeOf((*MockAuthServiceServer)(nil).SignupVK), arg0, arg1)
}

// mustEmbedUnimplementedAuthServiceServer mocks base method.
func (m *MockAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthServiceServer")
}

// mustEmbedUnimplementedAuthServiceServer indicates an expected call of mustEmbedUnimplementedAuthServiceServer.
func (mr *MockAuthServiceServerMockRecorder) mustEmbedUnimplementedAuthServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthServiceServer", reflect.TypeOf((*MockAuthServiceServer)(nil).mustEmbedUnimplementedAuthServiceServer))
}

// MockUnsafeAuthServiceServer is a mock of UnsafeAuthServiceServer interface.
type MockUnsafeAuthServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAuthServiceServerMockRecorder
}

// MockUnsafeAuthServiceServerMockRecorder is the mock recorder for MockUnsafeAuthServiceServer.
type MockUnsafeAuthServiceServerMockRecorder struct {
	mock *MockUnsafeAuthServiceServer
}

// NewMockUnsafeAuthServiceServer creates a new mock instance.
func NewMockUnsafeAuthServiceServer(ctrl *gomock.Controller) *MockUnsafeAuthServiceServer {
	mock := &MockUnsafeAuthServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAuthServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAuthServiceServer) EXPECT() *MockUnsafeAuthServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAuthServiceServer mocks base method.
func (m *MockUnsafeAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthServiceServer")
}

// mustEmbedUnimplementedAuthServiceServer indicates an expected call of mustEmbedUnimplementedAuthServiceServer.
func (mr *MockUnsafeAuthServiceServerMockRecorder) mustEmbedUnimplementedAuthServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthServiceServer", reflect.TypeOf((*MockUnsafeAuthServiceServer)(nil).mustEmbedUnimplementedAuthServiceServer))
}
