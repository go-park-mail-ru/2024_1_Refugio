// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package delivery_models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonCa3c062aDecodeMailInternalModelsDeliveryModels(in *jlexer.Lexer, out *OtherEmail) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "topic":
			out.Topic = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "readStatus":
			out.ReadStatus = bool(in.Bool())
		case "mark":
			out.Flag = bool(in.Bool())
		case "deleted":
			out.Deleted = bool(in.Bool())
		case "dateOfDispatch":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DateOfDispatch).UnmarshalJSON(data))
			}
		case "replyToEmailId":
			out.ReplyToEmailID = uint64(in.Uint64())
		case "draftStatus":
			out.DraftStatus = bool(in.Bool())
		case "spamStatus":
			out.SpamStatus = bool(in.Bool())
		case "senderEmail":
			out.SenderEmail = string(in.String())
		case "recipientEmail":
			out.RecipientEmail = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCa3c062aEncodeMailInternalModelsDeliveryModels(out *jwriter.Writer, in OtherEmail) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"topic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Topic))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"readStatus\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadStatus))
	}
	if in.Flag {
		const prefix string = ",\"mark\":"
		out.RawString(prefix)
		out.Bool(bool(in.Flag))
	}
	{
		const prefix string = ",\"deleted\":"
		out.RawString(prefix)
		out.Bool(bool(in.Deleted))
	}
	if true {
		const prefix string = ",\"dateOfDispatch\":"
		out.RawString(prefix)
		out.Raw((in.DateOfDispatch).MarshalJSON())
	}
	if in.ReplyToEmailID != 0 {
		const prefix string = ",\"replyToEmailId\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.ReplyToEmailID))
	}
	{
		const prefix string = ",\"draftStatus\":"
		out.RawString(prefix)
		out.Bool(bool(in.DraftStatus))
	}
	{
		const prefix string = ",\"spamStatus\":"
		out.RawString(prefix)
		out.Bool(bool(in.SpamStatus))
	}
	{
		const prefix string = ",\"senderEmail\":"
		out.RawString(prefix)
		out.String(string(in.SenderEmail))
	}
	{
		const prefix string = ",\"recipientEmail\":"
		out.RawString(prefix)
		out.String(string(in.RecipientEmail))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OtherEmail) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCa3c062aEncodeMailInternalModelsDeliveryModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OtherEmail) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCa3c062aEncodeMailInternalModelsDeliveryModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OtherEmail) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCa3c062aDecodeMailInternalModelsDeliveryModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OtherEmail) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCa3c062aDecodeMailInternalModelsDeliveryModels(l, v)
}
