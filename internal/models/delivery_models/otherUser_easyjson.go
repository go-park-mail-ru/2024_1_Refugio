// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package delivery_models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	domain_models "mail/internal/microservice/models/domain_models"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA299a139DecodeMailInternalModelsDeliveryModels(in *jlexer.Lexer, out *OtherUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "firstname":
			out.FirstName = string(in.String())
		case "surname":
			out.Surname = string(in.String())
		case "middlename":
			out.Patronymic = string(in.String())
		case "gender":
			out.Gender = domain_models.UserGender(in.String())
		case "birthday":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Birthday).UnmarshalJSON(data))
			}
		case "login":
			out.Login = string(in.String())
		case "avatar":
			out.AvatarID = string(in.String())
		case "phonenumber":
			out.PhoneNumber = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA299a139EncodeMailInternalModelsDeliveryModels(out *jwriter.Writer, in OtherUser) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.FirstName != "" {
		const prefix string = ",\"firstname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FirstName))
	}
	if in.Surname != "" {
		const prefix string = ",\"surname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Surname))
	}
	if in.Patronymic != "" {
		const prefix string = ",\"middlename\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Patronymic))
	}
	if in.Gender != "" {
		const prefix string = ",\"gender\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Gender))
	}
	if true {
		const prefix string = ",\"birthday\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Birthday).MarshalJSON())
	}
	{
		const prefix string = ",\"login\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Login))
	}
	if in.AvatarID != "" {
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.AvatarID))
	}
	if in.PhoneNumber != "" {
		const prefix string = ",\"phonenumber\":"
		out.RawString(prefix)
		out.String(string(in.PhoneNumber))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OtherUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA299a139EncodeMailInternalModelsDeliveryModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OtherUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA299a139EncodeMailInternalModelsDeliveryModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OtherUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA299a139DecodeMailInternalModelsDeliveryModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OtherUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA299a139DecodeMailInternalModelsDeliveryModels(l, v)
}
