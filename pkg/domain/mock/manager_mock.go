// Code generated by MockGen. DO NOT EDIT.
// Source: ./imanager.go

// Package mock is a generated GoMock package.
package mock

import (
	models "mail/pkg/delivery/models"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionsManager is a mock of SessionsManager interface.
type MockSessionsManager struct {
	ctrl     *gomock.Controller
	recorder *MockSessionsManagerMockRecorder
}

// MockSessionsManagerMockRecorder is the mock recorder for MockSessionsManager.
type MockSessionsManagerMockRecorder struct {
	mock *MockSessionsManager
}

// NewMockSessionsManager creates a new mock instance.
func NewMockSessionsManager(ctrl *gomock.Controller) *MockSessionsManager {
	mock := &MockSessionsManager{ctrl: ctrl}
	mock.recorder = &MockSessionsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionsManager) EXPECT() *MockSessionsManagerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockSessionsManager) Check(r *http.Request, requestID string) (*models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", r, requestID)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockSessionsManagerMockRecorder) Check(r, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockSessionsManager)(nil).Check), r, requestID)
}

// CheckLogin mocks base method.
func (m *MockSessionsManager) CheckLogin(login, requestID string, r *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLogin", login, requestID, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckLogin indicates an expected call of CheckLogin.
func (mr *MockSessionsManagerMockRecorder) CheckLogin(login, requestID, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLogin", reflect.TypeOf((*MockSessionsManager)(nil).CheckLogin), login, requestID, r)
}

// Create mocks base method.
func (m *MockSessionsManager) Create(w http.ResponseWriter, userID uint32, requestID string) (*models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", w, userID, requestID)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSessionsManagerMockRecorder) Create(w, userID, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionsManager)(nil).Create), w, userID, requestID)
}

// DestroyCurrent mocks base method.
func (m *MockSessionsManager) DestroyCurrent(w http.ResponseWriter, r *http.Request, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyCurrent", w, r, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyCurrent indicates an expected call of DestroyCurrent.
func (mr *MockSessionsManagerMockRecorder) DestroyCurrent(w, r, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyCurrent", reflect.TypeOf((*MockSessionsManager)(nil).DestroyCurrent), w, r, requestID)
}

// GetLoginBySession mocks base method.
func (m *MockSessionsManager) GetLoginBySession(r *http.Request, requestID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginBySession", r, requestID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginBySession indicates an expected call of GetLoginBySession.
func (mr *MockSessionsManagerMockRecorder) GetLoginBySession(r, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginBySession", reflect.TypeOf((*MockSessionsManager)(nil).GetLoginBySession), r, requestID)
}

// GetSession mocks base method.
func (m *MockSessionsManager) GetSession(r *http.Request, requestID string) *models.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", r, requestID)
	ret0, _ := ret[0].(*models.Session)
	return ret0
}

// GetSession indicates an expected call of GetSession.
func (mr *MockSessionsManagerMockRecorder) GetSession(r, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockSessionsManager)(nil).GetSession), r, requestID)
}
