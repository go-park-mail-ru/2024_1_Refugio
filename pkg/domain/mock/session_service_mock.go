// Code generated by MockGen. DO NOT EDIT.
// Source: ./isession_service.go

// Package mock is a generated GoMock package.
package mock

import (
	models "mail/pkg/domain/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionUseCase is a mock of SessionUseCase interface.
type MockSessionUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSessionUseCaseMockRecorder
}

// MockSessionUseCaseMockRecorder is the mock recorder for MockSessionUseCase.
type MockSessionUseCaseMockRecorder struct {
	mock *MockSessionUseCase
}

// NewMockSessionUseCase creates a new mock instance.
func NewMockSessionUseCase(ctrl *gomock.Controller) *MockSessionUseCase {
	mock := &MockSessionUseCase{ctrl: ctrl}
	mock.recorder = &MockSessionUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionUseCase) EXPECT() *MockSessionUseCaseMockRecorder {
	return m.recorder
}

// CleanupExpiredSessions mocks base method.
func (m *MockSessionUseCase) CleanupExpiredSessions() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupExpiredSessions")
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupExpiredSessions indicates an expected call of CleanupExpiredSessions.
func (mr *MockSessionUseCaseMockRecorder) CleanupExpiredSessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupExpiredSessions", reflect.TypeOf((*MockSessionUseCase)(nil).CleanupExpiredSessions))
}

// CreateNewSession mocks base method.
func (m *MockSessionUseCase) CreateNewSession(userID uint32, device, requestID string, lifeTime int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewSession", userID, device, requestID, lifeTime)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewSession indicates an expected call of CreateNewSession.
func (mr *MockSessionUseCaseMockRecorder) CreateNewSession(userID, device, requestID, lifeTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewSession", reflect.TypeOf((*MockSessionUseCase)(nil).CreateNewSession), userID, device, requestID, lifeTime)
}

// DeleteSession mocks base method.
func (m *MockSessionUseCase) DeleteSession(sessionID, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", sessionID, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockSessionUseCaseMockRecorder) DeleteSession(sessionID, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockSessionUseCase)(nil).DeleteSession), sessionID, requestID)
}

// GetLogin mocks base method.
func (m *MockSessionUseCase) GetLogin(sessionID, requestID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogin", sessionID, requestID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogin indicates an expected call of GetLogin.
func (mr *MockSessionUseCaseMockRecorder) GetLogin(sessionID, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogin", reflect.TypeOf((*MockSessionUseCase)(nil).GetLogin), sessionID, requestID)
}

// GetSession mocks base method.
func (m *MockSessionUseCase) GetSession(sessionID, requestID string) (*models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", sessionID, requestID)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockSessionUseCaseMockRecorder) GetSession(sessionID, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockSessionUseCase)(nil).GetSession), sessionID, requestID)
}
