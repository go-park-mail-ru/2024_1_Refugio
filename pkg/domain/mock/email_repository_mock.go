// Code generated by MockGen. DO NOT EDIT.
// Source: iemail_repo.go

// Package mock is a generated GoMock package.
package mock

import (
	models "mail/pkg/domain/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEmailRepository is a mock of EmailRepository interface.
type MockEmailRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmailRepositoryMockRecorder
}

// MockEmailRepositoryMockRecorder is the mock recorder for MockEmailRepository.
type MockEmailRepositoryMockRecorder struct {
	mock *MockEmailRepository
}

// NewMockEmailRepository creates a new mock instance.
func NewMockEmailRepository(ctrl *gomock.Controller) *MockEmailRepository {
	mock := &MockEmailRepository{ctrl: ctrl}
	mock.recorder = &MockEmailRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailRepository) EXPECT() *MockEmailRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockEmailRepository) Add(email *models.Email, requestID string) (int64, *models.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", email, requestID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*models.Email)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Add indicates an expected call of Add.
func (mr *MockEmailRepositoryMockRecorder) Add(email, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockEmailRepository)(nil).Add), email, requestID)
}

// AddProfileEmail mocks base method.
func (m *MockEmailRepository) AddProfileEmail(email_id int64, sender, recipient, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProfileEmail", email_id, sender, recipient, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProfileEmail indicates an expected call of AddProfileEmail.
func (mr *MockEmailRepositoryMockRecorder) AddProfileEmail(email_id, sender, recipient, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProfileEmail", reflect.TypeOf((*MockEmailRepository)(nil).AddProfileEmail), email_id, sender, recipient, requestID)
}

// Delete mocks base method.
func (m *MockEmailRepository) Delete(id uint64, login, requestID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id, login, requestID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockEmailRepositoryMockRecorder) Delete(id, login, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEmailRepository)(nil).Delete), id, login, requestID)
}

// FindEmail mocks base method.
func (m *MockEmailRepository) FindEmail(login, requestID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEmail", login, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindEmail indicates an expected call of FindEmail.
func (mr *MockEmailRepositoryMockRecorder) FindEmail(login, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEmail", reflect.TypeOf((*MockEmailRepository)(nil).FindEmail), login, requestID)
}

// GetAllIncoming mocks base method.
func (m *MockEmailRepository) GetAllIncoming(login, requestID string, offset, limit int) ([]*models.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllIncoming", login, requestID, offset, limit)
	ret0, _ := ret[0].([]*models.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllIncoming indicates an expected call of GetAllIncoming.
func (mr *MockEmailRepositoryMockRecorder) GetAllIncoming(login, requestID, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllIncoming", reflect.TypeOf((*MockEmailRepository)(nil).GetAllIncoming), login, requestID, offset, limit)
}

// GetAllSent mocks base method.
func (m *MockEmailRepository) GetAllSent(login, requestID string, offset, limit int) ([]*models.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSent", login, requestID, offset, limit)
	ret0, _ := ret[0].([]*models.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSent indicates an expected call of GetAllSent.
func (mr *MockEmailRepositoryMockRecorder) GetAllSent(login, requestID, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSent", reflect.TypeOf((*MockEmailRepository)(nil).GetAllSent), login, requestID, offset, limit)
}

// GetByID mocks base method.
func (m *MockEmailRepository) GetByID(id uint64, login, requestID string) (*models.Email, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id, login, requestID)
	ret0, _ := ret[0].(*models.Email)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockEmailRepositoryMockRecorder) GetByID(id, login, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockEmailRepository)(nil).GetByID), id, login, requestID)
}

// Update mocks base method.
func (m *MockEmailRepository) Update(newEmail *models.Email, requestID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", newEmail, requestID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockEmailRepositoryMockRecorder) Update(newEmail, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEmailRepository)(nil).Update), newEmail, requestID)
}
