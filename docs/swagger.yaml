basePath: /
definitions:
  delivery.EmailSwag:
    properties:
      dateOfDispatch:
        description: DateOfDispatch is the date when the email was sent.
        type: string
      deleted:
        description: Deleted indicates whether the email has been deleted.
        type: boolean
      draftStatus:
        description: DraftStatus indicates whether the email is a draft.
        type: boolean
      id:
        description: ID is the unique identifier of the email in the database.
        type: integer
      mark:
        description: Mark is a flag, such as marking the email as a favorite.
        type: boolean
      photoId:
        description: PhotoID is the link to the photo attached to the email, if any.
        type: string
      readStatus:
        description: ReadStatus indicates whether the email has been read.
        type: boolean
      recipientEmail:
        description: RecipientEmail is the Email of the recipient user
        type: string
      replyToEmailId:
        description: ReplyToEmailID is the ID of the email to which a reply can be
          sent.
        type: integer
      senderEmail:
        description: SenderEmail is the Email of the sender user
        type: string
      text:
        description: Text is the body of the email.
        type: string
      topic:
        description: Topic is the subject of the email.
        type: string
    type: object
  delivery.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  delivery.Response:
    properties:
      body: {}
      status:
        type: integer
    type: object
  delivery.UserSwag:
    properties:
      avatar:
        description: AvatarID stores the identifier of the user's avatar image.
        type: string
      birthday:
        description: Birthday stores the birthdate of the user.
        type: string
      description:
        description: Description stores additional information about the user.
        type: string
      firstname:
        description: FirstName stores the first name of the user.
        type: string
      gender:
        allOf:
        - $ref: '#/definitions/models.UserGender'
        description: Gender stores the gender of the user.
      id:
        description: ID uniquely identifies the user.
        type: integer
      login:
        description: Login is the username used for authentication.
        type: string
      middlename:
        description: Patronymic stores the middle name of the user, if available.
        type: string
      password:
        description: Password is the hashed password of the user.
        type: string
      phonenumber:
        description: PhoneNumber stores the phone number of the user.
        type: string
      surname:
        description: Surname stores the last name of the user.
        type: string
    type: object
  models.UserGender:
    enum:
    - Male
    - Female
    - Other
    type: string
    x-enum-varnames:
    - Male
    - Female
    - Other
host: mailhub.su:8080
info:
  contact: {}
  description: API server for mail
  title: API Mail
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Handles user login.
      parameters:
      - description: User credentials for login
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/delivery.UserSwag'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/delivery.Response'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/delivery.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/delivery.ErrorResponse'
        "500":
          description: Failed to create session
          schema:
            $ref: '#/definitions/delivery.ErrorResponse'
      summary: User login
      tags:
      - auth
  /api/v1/auth/logout:
    post:
      description: Handles user logout.
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/delivery.Response'
      summary: User logout
      tags:
      - auth
  /api/v1/auth/signup:
    post:
      consumes:
      - application/json
      description: Handles user signup.
      parameters:
      - description: New user details for signup
        in: body
        name: newUser
        required: true
        schema:
          $ref: '#/definitions/delivery.UserSwag'
      produces:
      - application/json
      responses:
        "200":
          description: Signup successful
          schema:
            $ref: '#/definitions/delivery.Response'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/delivery.ErrorResponse'
        "500":
          description: Failed to add user
          schema:
            $ref: '#/definitions/delivery.ErrorResponse'
      summary: User signup
      tags:
      - auth
  /api/v1/email/{id}:
    get:
      description: Get an email message by its unique identifier
      parameters:
      - description: ID of the email message
        in: path
        name: id
        required: true
        type: integer
      - description: CSRF Token
        in: header
        name: X-Csrf-Token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Email message data
          schema:
            $ref: '#/definitions/delivery.Response'
        "400":
          description: Bad id in request
          schema:
            $ref: '#/definitions/delivery.Response'
        "401":
          description: Not Authorized
          schema:
            $ref: '#/definitions/delivery.Response'
        "404":
          description: Email not found
          schema:
            $ref: '#/definitions/delivery.Response'
      summary: Get an email message by ID
      tags:
      - emails
  /api/v1/email/delete/{id}:
    delete:
      description: Delete an email message based on its identifier
      parameters:
      - description: ID of the email message
        in: path
        name: id
        required: true
        type: integer
      - description: CSRF Token
        in: header
        name: X-Csrf-Token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Deletion success status
          schema:
            $ref: '#/definitions/delivery.Response'
        "400":
          description: Bad id
          schema:
            $ref: '#/definitions/delivery.Response'
        "401":
          description: Not Authorized
          schema:
            $ref: '#/definitions/delivery.Response'
        "500":
          description: Failed to delete email message
          schema:
            $ref: '#/definitions/delivery.Response'
      summary: Delete an email message
      tags:
      - emails
  /api/v1/email/send:
    post:
      consumes:
      - application/json
      description: Send a new email message to the system
      parameters:
      - description: CSRF Token
        in: header
        name: X-Csrf-Token
        required: true
        type: string
      - description: Email message in JSON format
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/delivery.EmailSwag'
      produces:
      - application/json
      responses:
        "200":
          description: ID of the send email message
          schema:
            $ref: '#/definitions/delivery.Response'
        "400":
          description: Bad JSON in request
          schema:
            $ref: '#/definitions/delivery.Response'
        "401":
          description: Not Authorized
          schema:
            $ref: '#/definitions/delivery.Response'
        "500":
          description: Failed to add email message
          schema:
            $ref: '#/definitions/delivery.Response'
      summary: Send a new email message
      tags:
      - emails
  /api/v1/email/update/{id}:
    put:
      consumes:
      - application/json
      description: Update an existing email message based on its identifier
      parameters:
      - description: CSRF Token
        in: header
        name: X-Csrf-Token
        required: true
        type: string
      - description: ID of the email message
        in: path
        name: id
        required: true
        type: integer
      - description: Email message in JSON format
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/delivery.EmailSwag'
      produces:
      - application/json
      responses:
        "200":
          description: Update success status
          schema:
            $ref: '#/definitions/delivery.Response'
        "400":
          description: Bad id or Bad JSON
          schema:
            $ref: '#/definitions/delivery.Response'
        "401":
          description: Not Authorized
          schema:
            $ref: '#/definitions/delivery.Response'
        "500":
          description: Failed to update email message
          schema:
            $ref: '#/definitions/delivery.Response'
      summary: Update an email message
      tags:
      - emails
  /api/v1/emails/incoming:
    get:
      description: Get a list of all email messages
      parameters:
      - description: CSRF Token
        in: header
        name: X-Csrf-Token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of all email messages
          schema:
            $ref: '#/definitions/delivery.Response'
        "401":
          description: Not Authorized
          schema:
            $ref: '#/definitions/delivery.Response'
        "404":
          description: DB error
          schema:
            $ref: '#/definitions/delivery.Response'
        "500":
          description: JSON encoding error
          schema:
            $ref: '#/definitions/delivery.Response'
      summary: Display the list of email messages
      tags:
      - emails
  /api/v1/emails/sent:
    get:
      description: Get a list of all email messages
      parameters:
      - description: CSRF Token
        in: header
        name: X-Csrf-Token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of all email messages
          schema:
            $ref: '#/definitions/delivery.Response'
        "401":
          description: Not Authorized
          schema:
            $ref: '#/definitions/delivery.Response'
        "404":
          description: DB error
          schema:
            $ref: '#/definitions/delivery.Response'
        "500":
          description: JSON encoding error
          schema:
            $ref: '#/definitions/delivery.Response'
      summary: Display the list of email messages
      tags:
      - emails
  /api/v1/user/avatar/upload:
    post:
      consumes:
      - multipart/form-data
      description: Handles requests to upload user avatar.
      parameters:
      - description: CSRF Token
        in: header
        name: X-Csrf-Token
        required: true
        type: string
      - description: Avatar file to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: File uploaded and saved successfully
          schema:
            $ref: '#/definitions/delivery.Response'
        "400":
          description: Error processing file or failed to get file
          schema:
            $ref: '#/definitions/delivery.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/delivery.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Upload user avatar
      tags:
      - users
  /api/v1/user/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Handles requests to delete user data.
      parameters:
      - description: CSRF Token
        in: header
        name: X-Csrf-Token
        required: true
        type: string
      - description: User ID to delete
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User data deleted successfully
          schema:
            $ref: '#/definitions/delivery.Response'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/delivery.ErrorResponse'
        "401":
          description: Not authorized
          schema:
            $ref: '#/definitions/delivery.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/delivery.ErrorResponse'
      summary: Delete user data
      tags:
      - users
  /api/v1/user/get:
    get:
      description: Retrieve the user associated with the current session
      parameters:
      - description: CSRF Token
        in: header
        name: X-Csrf-Token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/delivery.Response'
        "401":
          description: Not Authorized
          schema:
            $ref: '#/definitions/delivery.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/delivery.ErrorResponse'
      summary: Get user by session
      tags:
      - users
  /api/v1/user/update:
    put:
      consumes:
      - application/json
      description: Handles requests to update user data.
      parameters:
      - description: CSRF Token
        in: header
        name: X-Csrf-Token
        required: true
        type: string
      - description: Updated user data
        in: body
        name: updatedUser
        required: true
        schema:
          $ref: '#/definitions/delivery.UserSwag'
      produces:
      - application/json
      responses:
        "200":
          description: User data updated successfully
          schema:
            $ref: '#/definitions/delivery.Response'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/delivery.ErrorResponse'
        "401":
          description: Not authorized
          schema:
            $ref: '#/definitions/delivery.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/delivery.ErrorResponse'
      summary: Update user data
      tags:
      - users
  /api/v1/verify-auth:
    get:
      description: Verify user authentication using sessions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/delivery.Response'
        "401":
          description: Not Authorized
          schema:
            $ref: '#/definitions/delivery.Response'
      summary: Verify user authentication
      tags:
      - users
swagger: "2.0"
